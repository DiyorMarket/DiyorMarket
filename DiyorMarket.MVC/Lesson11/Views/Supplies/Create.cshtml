@model Lesson11.ViewModels.SupplyViewModel
@using System.Collections.Generic

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_DataGridLayout.cshtml";
    List<Product> products = ViewBag.Products;
}

<!-- Navigation link -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/dashboard/index"><i class="fa fa-home" style="color: white"></i></a></li>
        <li class="breadcrumb-item"><a asp-controller="Supplies" asp-action="Index">Supplies List</a></li>
        <li class="breadcrumb-item active" aria-current="page">Create</li>
    </ol>
</nav>

<hr class="align-items-baseline" style="margin-top: 100px" />

<div asp-validation-summary="ModelOnly" class="text-danger"></div>
<form class="d-flex justify-content-start gap-5">
    <div style ="width: 310px">
        <ejs-datetimepicker id="supply-date" value="@DateTime.Now"></ejs-datetimepicker>
    </div>
    <div style="width: 270px">
        <ejs-combobox id="supplier-id" autofill="true" dataSource="@ViewBag.Suppliers" placeholder="Select Supplier" popupHeight="230px">
            <e-combobox-fields text="FirstName" value="Id"></e-combobox-fields>
        </ejs-combobox>
    </div>
</form>
<div class="d-flex justify-content-between mt-3 mb-3">
    <div class="d-flex flex-row gap-5">
        <div style="width: 310px">
            <ejs-combobox id="products-list" autofill="true" dataSource="@ViewBag.Products" change="onSelectedProductChanged" placeholder="Select a product" popupHeight="230px" style="color: white;">
                <e-combobox-fields text="Name" value="Id"></e-combobox-fields>
            </ejs-combobox>
        </div>
        <div style="width: 270px">
            <ejs-numerictextbox id="item-quantity" value="1" format="###.##" floatLabelType="Auto"></ejs-numerictextbox>
        </div>
        <div>
            <ejs-numerictextbox id="item-price" format="c2" floatLabelType="Auto"></ejs-numerictextbox>
        </div>
    </div>
    <button class="btn btn-outline-success mr-auto" type="button" id="addItem">
        <i class="fa fa-plus"></i> Add
    </button>
</div>

<div class="form-group">
    <ejs-grid id="supply-items" asp-for="Supply.SupplyItems" toolbar="@(new List<string>() { "Edit", "Delete" })">
        <e-grid-editsettings allowDeleting="true" allowEditing="true" mode="Normal"></e-grid-editsettings>
        <e-grid-columns>
            <e-grid-column headerText="Id" field="ProductId" type="string"></e-grid-column>
            <e-grid-column headerText="Product Name" field="Name" type="string"></e-grid-column>
            <e-grid-column headerText="Quantity" field="Quantity" type="number"></e-grid-column>
            <e-grid-column headerText="UnitPrice" field="UnitPrice" type="string" format="C2"></e-grid-column>
            <e-grid-column headerText="Total Price" field="TotalPrice" type="number" format="C2"></e-grid-column>
        </e-grid-columns>
    </ejs-grid>
</div>

<div class="mt-3">
    <a asp-action="Index" class="btn btn-outline-info">
        <i class="fa-solid fa-arrow-left-long"></i>
        Back
    </a>
    <button class="btn btn-success mr-auto" type="button" id="create">
        <i class="fa fa-check-circle"></i> Save
    </button>
</div>

<script>
    // add new item
    document.getElementById('addItem').onclick = function () {
        const grid = document.getElementById("supply-items").ej2_instances[0];
        const quantity = document.getElementById('item-quantity').ej2_instances[0];
        const unitPrice = document.getElementById('item-price').ej2_instances[0];
        const productsList = document.getElementById('products-list').ej2_instances[0];

        const supplyItem = {
            ProductId: productsList.value,
            Name: productsList.text,
            Quantity: quantity.value,
            UnitPrice: unitPrice.value,
            TotalPrice: quantity.value * unitPrice.value
        };
        
        if (grid.dataSource.some(el => el.ProductId == supplyItem?.ProductId)) {
            return;
        }

        grid.dataSource.unshift(supplyItem);
        grid.refresh();
    };

    // submit supply
    document.getElementById('create').onclick = function () {
        const grid = document.getElementById("supply-items").ej2_instances[0];
        const items = grid.dataSource;
        const selectedDate = document.getElementById('supply-date').ej2_instances[0].value;
        const newSupply = {
            SupplyItems: items,
            Date: selectedDate,
            supplierId: $("#supplier-id").val()
        };
        console.log(newSupply);
        $.ajax
            ({
                url: '@Url.Action("Create", "Supplies")',
                type: 'POST',
                data: JSON.stringify(newSupply), //
                contentType: "application/json",
                dataType: 'JSON',
                success: function (data) {
                    document.getElementById('targetButton').onclick = function () {
                        const dialog = document.getElementById("dialog").ej2_instances[0];
                        dialog.show();
                    }
                },
                error: function(data) {
                    alert('There was an error saving creating new supply! Please, try again.');
                }
            });
    }

    document.addEventListener('DOMContentLoaded', function () {
        const options = {
            rules: {
                //must specify the name attribute value in rules section
                'datevalue': { required: true }
            },
            customPlacement: (inputElement, errorElement) => {
                //to place the error message in custom position
                //inputElement - target element where the error text will be appended
                //errorElement - error text which will be displayed.
                inputElement.parentElement.parentElement.appendChild(errorElement);
            }
        };
        const formObject = new ej.inputs.FormValidator('#form-element', options);
    });

    function dlgButtonClick() {
        const dialogObj = document.getElementById('dialog').ej2_instances[0];
        dialogObj.hide();
    }

    function onSelectedProductChanged() {
        const productsList = document.getElementById('products-list').ej2_instances[0];
        const selectedProduct = productsList.dataSource.find(el => el.Id == productsList.value);
        document.getElementById('item-price').ej2_instances[0].value = selectedProduct.SupplyPrice;
    }
</script>