@model Lesson11.ViewModels.SupplyViewModel
@using System.Collections.Generic

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_DataGridLayout.cshtml";
}

<!-- Navigation link -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/dashboard/index"><i class="fa fa-home" style="color: white"></i></a></li>
        <li class="breadcrumb-item"><a asp-controller="Supplies" asp-action="Index">Supplies List</a></li>
        <li class="breadcrumb-item active" aria-current="page">Create</li>
    </ol>
</nav>

<hr class="align-items-baseline" style="margin-top: 100px" />


<div>
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="d-flex justify-content-start">
        <form id="form-element" class="form-vertical">
            <div class="form-group">
                <ejs-datetimepicker id="supply-date" value="@DateTime.Now"></ejs-datetimepicker>
            </div>
        </form>
        <div class="p-0 mr-5">
            <label class="control-label mt-2"></label>
            <select id="supplier-id" class="form-control border border-dark" asp-for="SupplierId" asp-items="@ViewBag.Suppliers"></select>
        </div>
    </div>
    <div class="d-flex justify-content-start">
        <div class="p-0 mr-5">
            <label class="control-label mt-2"></label>
            <select id="supplyItemProductId" class="form-control border border-dark" asp-items="@ViewBag.Products"></select>
        </div>
        <div class="p-2">
            <label class="control-label"></label>
            <input id="SupplyItem_Quantity" class="form-control" />
            <span class="text-danger"></span>
        </div>
        <div class="p-2">
            <label class="control-label"></label>
            <input id="SupplyItem_UnitPrice" class="form-control" />
            <span class="text-danger"></span>
        </div>
        <div class="p-2">
            <button class="btn btn-outline-success mr-auto" type="button" id="addItem">
                <i class="fa fa-plus"></i> Add
            </button>
        </div>
    </div>

    <div class="form-group">
        <ejs-grid id="supply-items" asp-for="Supply.SupplyItems" toolbar="@(new List<string>() { "Edit", "Delete" })">
            <e-grid-editsettings allowDeleting="true" allowEditing="true" mode="Normal"></e-grid-editsettings>
            <e-grid-columns>
                <e-grid-column headerText="Product Name" field="ProductId" type="string"></e-grid-column>
                <e-grid-column headerText="Quantity" field="Quantity" type="number" format="C2"></e-grid-column>
                <e-grid-column headerText="UnitPrice" field="UnitPrice" type="string"></e-grid-column>
                <e-grid-column headerText="Total Price" field="TotalPrice" type="number" format="C2"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>

    <div class="mt-3">
        <a asp-action="Index" class="btn btn-outline-info">
            <i class="fa-solid fa-arrow-left-long"></i>
            Back
        </a>
        <button class="btn btn-success mr-auto" type="button" id="create">
            <i class="fa fa-plus"></i> Create
        </button>
    </div>
</div>

<script>
    // add new item
    document.getElementById('addItem').onclick = function () {
        var grid = document.getElementById("supply-items").ej2_instances[0];
        var supplyItem = {
            ProductId: $("#supplyItemProductId").val(),
            Quantity: parseInt($("#SupplyItem_Quantity").val(), 10),
            UnitPrice: parseFloat($("#SupplyItem_UnitPrice").val()),
        };
        supplyItem.TotalPrice = supplyItem.Quantity * supplyItem.UnitPrice;

        if (grid.dataSource.some(el => el.ProductId == supplItem.ProductId)) {
            return;
        }

        grid.dataSource.unshift(supplyItem); // add new record.
        grid.refresh(); // refresh the Grid.
    };

    // submit supply
    document.getElementById('create').onclick = function () {
        var grid = document.getElementById("supply-items").ej2_instances[0];
        var items = grid.dataSource;
        const selectedDate = document.getElementById('supply-date').ej2_instances[0].value;
        var newSupply = {
            SupplyItems: items,
            Date: selectedDate,
            supplierId: $("#supplier-id").val()
        };
        console.log(newSupply);
        $.ajax
            ({
                url: '@Url.Action("Create", "Supplies")',
                type: 'POST',
                data: JSON.stringify(newSupply), //
                contentType: "application/json",
                dataType: 'JSON',
                success: function (data) {
                    document.getElementById('targetButton').onclick = function () {
                        var dialog = document.getElementById("dialog").ej2_instances[0];
                        dialog.show();
                    }
                },
                error: function(data) {
                    alert('There was an error saving creating new supply! Please, try again.');
                }
            });
    }

    document.addEventListener('DOMContentLoaded', function () {
        var options = {
            rules: {
                //must specify the name attribute value in rules section
                'datevalue': { required: true }
            },
            customPlacement: (inputElement, errorElement) => {
                //to place the error message in custom position
                //inputElement - target element where the error text will be appended
                //errorElement - error text which will be displayed.
                inputElement.parentElement.parentElement.appendChild(errorElement);
            }
        };
        var formObject = new ej.inputs.FormValidator('#form-element', options);
    });

    function dlgButtonClick() {
        var dialogObj = document.getElementById('dialog').ej2_instances[0];
        dialogObj.hide();
    }
</script>